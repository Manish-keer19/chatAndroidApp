import React, {useState} from 'react';
import {
  View,
  TextInput,
  Text,
  TouchableOpacity,
  Image,
  Alert,
  StyleSheet,
  ActivityIndicator,
} from 'react-native';
import {NavigationProp, useNavigation} from '@react-navigation/native';
import {RootStackParamList} from '../../Entryroute';
import {launchCamera, launchImageLibrary} from 'react-native-image-picker';

const SignUp = () => {
  const navigation = useNavigation<NavigationProp<RootStackParamList>>();
  const [userName, setUserName] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [confirmPassword, setConfirmPassword] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [imageUri, setImageUri] = useState<string | null>(null);

  const handleSubmit = async () => {
    if (!userName || !email || !password || !confirmPassword) {
      Alert.alert('Error', 'Please fill all the fields');
      return;
    }
    if (password !== confirmPassword) {
      Alert.alert('Error', 'Passwords do not match');
      return;
    }

    setIsLoading(true);
    setTimeout(() => {
      setIsLoading(false);
      Alert.alert('Success', 'Account created successfully');
    }, 2000);
  };

  const handleCamera = () => {
    launchCamera(
      {
        mediaType: 'photo',
        cameraType: 'back',
        saveToPhotos: true,
      },
      response => {
        if (response.didCancel) {
          console.log('User cancelled image picker');
        } else if (response.errorCode) {
          console.log('Error: ', response.errorMessage);
        } else {
          setImageUri(response.assets?.[0]?.uri || null);
        }
      },
    );
  };

  const handleImageLibrary = () => {
    launchImageLibrary(
      {
        mediaType: 'photo',
      },
      response => {
        if (response.didCancel) {
          console.log('User cancelled image picker');
        } else if (response.errorCode) {
          console.log('Error: ', response.errorMessage);
        } else {
          setImageUri(response.assets?.[0]?.uri || null);
        }
      },
    );
  };

  return (
    <View style={styles.container}>
      {/* Profile Picture Upload */}
      <View style={styles.profilePicContainer}>
        <TouchableOpacity onPress={handleImageLibrary} style={styles.imageButton}>
          {imageUri ? (
            <Image source={{uri: imageUri}} style={styles.profilePic} />
          ) : (
            <View style={styles.profilePicPlaceholder}>
              <Text style={styles.iconText}>+</Text>
            </View>
          )}
        </TouchableOpacity>
        <View style={styles.cameraButtonsContainer}>
          <TouchableOpacity onPress={handleImageLibrary} style={styles.cameraButton}>
            <Text style={styles.cameraButtonText}>Upload Photo</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={handleCamera} style={styles.cameraButton}>
            <Text style={styles.cameraButtonText}>Take a Photo</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Username Input */}
      <TextInput
        style={styles.input}
        placeholder="Username"
        placeholderTextColor="#888"
        value={userName}
        onChangeText={setUserName}
      />

      {/* Email Input */}
      <TextInput
        style={styles.input}
        placeholder="Email"
        placeholderTextColor="#888"
        value={email}
        onChangeText={setEmail}
      />

      {/* Password Input */}
      <TextInput
        style={styles.input}
        placeholder="Password"
        placeholderTextColor="#888"
        secureTextEntry
        value={password}
        onChangeText={setPassword}
      />

      {/* Confirm Password Input */}
      <TextInput
        style={styles.input}
        placeholder="Confirm Password"
        placeholderTextColor="#888"
        secureTextEntry
        value={confirmPassword}
        onChangeText={setConfirmPassword}
      />

      {/* Submit Button */}
      <TouchableOpacity
        style={[styles.button, isLoading && styles.buttonDisabled]}
        onPress={handleSubmit}
        disabled={isLoading}>
        {isLoading ? (
          <ActivityIndicator color="#FFF" />
        ) : (
          <Text style={styles.buttonText}>Sign Up</Text>
        )}
      </TouchableOpacity>

      {/* Login Link */}
      <TouchableOpacity onPress={() => navigation.navigate('Login')}>
        <Text style={styles.loginLink}>Already have an account? Log in</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1A1A1A',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  profilePicContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  profilePic: {
    width: 120,
    height: 120,
    borderRadius: 60,
  },
  profilePicPlaceholder: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: '#3C3C3C',
    justifyContent: 'center',
    alignItems: 'center',
  },
  iconText: {
    color: '#FFFFFF',
    fontSize: 30,
  },
  cameraButtonsContainer: {
    flexDirection: 'row',
    marginTop: 10,
  },
  cameraButton: {
    backgroundColor: '#8A4F96',
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: 8,
    marginHorizontal: 5,
  },
  cameraButtonText: {
    color: '#FFF',
    fontSize: 14,
    fontWeight: 'bold',
  },
  input: {
    width: '100%',
    padding: 14,
    marginVertical: 8,
    borderRadius: 10,
    backgroundColor: '#333',
    color: '#FFF',
    fontSize: 16,
  },
  button: {
    width: '100%',
    padding: 14,
    borderRadius: 10,
    backgroundColor: '#8A4F96',
    marginVertical: 16,
    alignItems: 'center',
  },
  buttonDisabled: {
    backgroundColor: '#555',
  },
  buttonText: {
    color: '#FFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  loginLink: {
    color: '#8A4F96',
    fontSize: 16,
    marginTop: 10,
  },
});

export default SignUp;



