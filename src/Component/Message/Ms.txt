import {
  Alert,
  Image,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  ToastAndroid,
  TouchableOpacity,
  View,
} from 'react-native';
import React, {useEffect, useRef, useState} from 'react';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import AntDesign from 'react-native-vector-icons/AntDesign';

import SockJS from 'sockjs-client';
import {Client} from '@stomp/stompjs';

import 'globalthis/auto';
import axiosInstance, {BASE_URL} from '../../Services/axios';
import axios from 'axios';
import {useSelector} from 'react-redux';

export default function UserChat({route}: any) {
  const {user} = route.params || {};
  const selectedUser = user;
  // console.log('seleted user is ', selectedUser);
  const token = useSelector((state: any) => state.User.token);
  const userData = useSelector((state: any) => state.User.userdata);
  // console.log('user data is ', userData);
  const scrollViewRef = useRef<ScrollView>(null);
  const [messages, setMessages] = useState<any[]>([]);
  const [messageEditModal, setMessageEditModal] = useState(false);
  const [message, setMessage] = useState('');
  const [selectedMessageID, setselectedMessageID] = useState<string>('');
  const [selectedMessageText, setSelectedMessageText] = useState<string>('');
  const [isEditable, setIsEditable] = useState<boolean>(false);
  const inputRef = useRef<TextInput | null>(null);

  const [stompClient, setStompClient] = useState<Client | null>(null);
  //   const wsUrl = 'http://localhost:8080/ws';
  const wsUrl = 'http://192.168.199.139:8080/ws';
  useEffect(() => {
    const client = new Client({
      webSocketFactory: () => new SockJS(wsUrl), // Use SockJS factory
      debug: str => console.log('[STOMP]', str),
      reconnectDelay: 5000,
      heartbeatIncoming: 4000,
      heartbeatOutgoing: 4000,
    });

    // Add lifecycle handlers
    client.onConnect = frame => {
      console.log('STOMP Connected:', frame.headers);

      client.subscribe('/public/messages', message => {
        const messageData = JSON.parse(message.body);
        console.log('Message received:', messageData);
        setMessages(prevMessages => [...prevMessages, messageData]);
        setMessage('');
      });

      client.subscribe(`/user/queue/${userData.id}`, message => {
        const messageData = JSON.parse(message.body);
        console.log('Message received:', messageData);
        setMessages(prevMessages => [...prevMessages, messageData]);
        setMessage('');
      });
    };

    client.onStompError = frame => {
      console.error('STOMP Error:', frame.headers.message);
    };

    client.onWebSocketError = event => {
      console.error('WebSocket Error:', event);
    };

    client.activate();
    setStompClient(client);

    return () => {
      client.deactivate();
    };
  }, []);

  const sendMessage = async () => {
    if (!stompClient?.connected) {
      console.error('Not connected');
      return;
    }

    try {
      stompClient.publish({
        destination: '/app/sendMessageString',
        body: JSON.stringify(message),
        headers: {'content-type': 'application/json'},
      });
    } catch (error) {
      console.error('Send failed:', error);
    }
  };
  const sendMessageSenderAndReceiver = () => {
    console.log('Sending message from sender to receiver');
    console.log('Message content:', message);

    if (!stompClient) {
      console.log('STOMP client is not initialized yet.');
      return; // Avoid sending message or performing actions
    }

    // Validate the message content
    if (message.length <= 0) {
      console.log('Message length is:', message.length);
      ToastAndroid.show("Message can't be empty", ToastAndroid.SHORT);
      return;
    }

    // Check if all necessary data is available

    // console.log('Selected user:', selectedUser);
    // console.log('User data:', userData);
    // console.log('Stomp client:', stompClient);
    if (stompClient && selectedUser && userData) {
      const messageData = {
        senderId: userData?.id,
        receiverId: selectedUser?.id,
        messageContent: message,
      };

      stompClient?.publish({
        destination: '/app/sendMessageSenderAndReceiver',
        body: JSON.stringify(messageData),
        headers: {'content-type': 'application/json'},
      });

      console.log('Message sent:', messageData);
      setMessage(''); // Clear message input after sending
    } else {
      ToastAndroid.show(
        'Failed to send message. Please try again.',
        ToastAndroid.SHORT,
      );
    }
  };

  const fetchMessages = async () => {
    try {
      console.log('Fetching messages for user:', selectedUser?.userName);
      if (!selectedUser || !selectedUser.id || !token) {
        ToastAndroid.show(
          'selected user or token or found',
          ToastAndroid.SHORT,
        );
        return;
      }
      const res = await axiosInstance.get(
        `message/get-messages/${selectedUser.id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      );

      console.log('response data is ', res.data);
      setMessages(res.data.data.messages);
    } catch (error) {
      console.error('Error fetching messages:', error);
      if (axios.isAxiosError(error) && error.response) {
        console.log('Error response data:', error.response.data);
        console.log('Error response status:', error.response.status);
      }
      if (error instanceof Error) {
        console.log('Error message:', error.message);
      } else {
        console.log('Unexpected error:', error);
      }
    }
  };

  useEffect(() => {
    fetchMessages();
  }, [user]);

  useEffect(() => {
    if (scrollViewRef.current) {
      scrollViewRef.current.scrollToEnd({animated: true});
    }
  }, [messages]);

  const handleDeleteMessage = async () => {};
  const handleEditMessage = (msg: any) => {
    setMessageEditModal(false);
    console.log('message is ', msg);
    setMessage(msg.message);
    inputRef.current?.focus();
    setIsEditable(true);
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <TouchableOpacity style={{padding: 10}}>
            <MaterialCommunityIcons name="arrow-left" size={24} color="white" />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.userInfo}
            onPress={() => {
              console.log('user id ', user?._id);
            }}>
            <Image
              source={{
                uri: user?.profilePic,
              }}
              style={styles.userImage}
            />

            <View>
              <Text style={styles.userName}>{user?.userName}</Text>
              <Text style={styles.userStatus}>Online</Text>
            </View>
          </TouchableOpacity>
        </View>
        <View style={styles.headerRight}>
          <MaterialIcons name="call" size={24} color="white" />
          <FontAwesome name="video-camera" size={24} color="white" />
        </View>
      </View>

      <ScrollView
        ref={scrollViewRef}
        style={styles.messageContainer}
        showsVerticalScrollIndicator={false}
        onContentSizeChange={() =>
          scrollViewRef.current?.scrollToEnd({animated: true})
        }>
        {messages?.length > 0 ? (
          <View style={styles.messageWrapper}>
            {messages.map((msg: any, i: any) => (
              <TouchableOpacity
                key={i}
                style={[
                  styles.message,
                  msg.sender !== user?.id
                    ? styles.selectedUserMessage // Left aligned for current user
                    : styles.currentUserMessage, //  Right aligned for selected user
                ]}
                onPress={() => setMessageEditModal(false)}
                onLongPress={() => {
                  setselectedMessageID(msg._id);
                  setMessageEditModal(true);
                }}>
                <View style={{gap: 10}}>
                  {msg.sender?._id === selectedUser?._id ? (
                    <View style={styles.selectedUserRow}>
                      <Text style={styles.selectedUserMessageText}>
                        {msg.message}
                      </Text>
                      {msg.media && (
                        <Image
                          source={{uri: msg.media}}
                          style={styles.selectedUserMedia}
                        />
                      )}
                      <Image
                        source={{
                          uri:
                            msg.sender?.profilePic || 'default-profile-pic-url',
                        }}
                        style={styles.selectedUserImageSmall}
                      />
                    </View>
                  ) : (
                    <View style={styles.currentUserRow}>
                      <Image
                        source={{
                          uri:
                            msg.sender?.profilePic || 'default-profile-pic-url',
                        }}
                        style={styles.currentUserImageSmall}
                      />
                      {msg.media && (
                        <Image
                          source={{uri: msg.media}}
                          style={styles.currentUserMedia}
                        />
                      )}
                      <Text style={styles.currentUserMessageText}>
                        {msg.message}
                      </Text>
                    </View>
                  )}
                </View>
              </TouchableOpacity>
            ))}
          </View>
        ) : (
          <View style={styles.noMessagesContainer}>
            <Text style={styles.noMessagesText}>
              No messages yet. Start the conversation!
            </Text>
          </View>
        )}
      </ScrollView>

      <View style={styles.inputContainer}>
        <View style={styles.inputWrapper}>
          <MaterialCommunityIcons name="camera" size={24} color="white" />
          <TextInput
            ref={inputRef}
            multiline
            // textAlignVertical="top"
            style={styles.textInput}
            placeholder="Message..."
            placeholderTextColor={'white'}
            value={message}
            onChangeText={value => {
              setMessage(value);
              // console.log("message is ",message)
            }}
          />
        </View>
        <View style={styles.iconContainer}>
        

          <TouchableOpacity
            style={{
              backgroundColor: 'darkblue',
              padding: 10,
              borderRadius: 10,
            }}
            onPress={
              // sendMessage
              sendMessageSenderAndReceiver
            }>
            <FontAwesome name="send" size={24} color="white" />
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: 'black',
    width: '100%',
    height: '100%',
  },
  header: {
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 10,
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 15,
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  userImage: {
    width: 30,
    height: 30,
    borderRadius: 50,
  },
  userName: {
    color: 'white',
  },
  userStatus: {
    color: 'white',
    fontSize: 13,
  },
  headerRight: {
    flexDirection: 'row',
    gap: 15,
    marginRight: 10,
  },
  inputContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 10,
    backgroundColor: '#121212', // Dark mode background
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
    flex: 1,
    backgroundColor: '#333333',
    borderRadius: 10,
    paddingHorizontal: 10,
  },
  textInput: {
    flex: 1,
    color: 'white',
  },
  iconContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },

  messageContainer: {
    flex: 1,
    paddingHorizontal: 10,
    backgroundColor: '#121212', // Dark mode background
  },
  messageWrapper: {
    gap: 10,
    paddingBottom: 20,
  },
  // message: {
  //   marginVertical: 5,
  //   maxWidth: '80%',
  //   borderRadius: 10,
  //   padding: 10,
  //   alignSelf: 'flex-start',
  // },
  userMessage: {
    backgroundColor: '#1E90FF',
    alignSelf: 'flex-end',
  },
  otherUserMessage: {
    backgroundColor: '#333333',
  },
  userRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  otherUserRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  userMessageText: {
    color: 'white',
    fontSize: 16,
  },
  otherUserMessageText: {
    color: 'white',
    fontSize: 16,
  },
  userImageSmall: {
    width: 30,
    height: 30,
    borderRadius: 15,
  },
  otherUserImageSmall: {
    width: 30,
    height: 30,
    borderRadius: 15,
  },
  userMedia: {
    width: 200,
    height: 150,
    borderRadius: 10,
    marginTop: 5,
  },
  otherUserMedia: {
    width: 200,
    height: 150,
    borderRadius: 10,
    marginTop: 5,
  },
  editModal: {
    width: 170,
    minHeight: 70,
    backgroundColor: '#303030',
    borderRadius: 10,
    gap: 8,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 10,
  },
  editButton: {
    backgroundColor: '#363636',
    width: '90%',
    borderRadius: 10,
    alignItems: 'center',
    flexDirection: 'row',
    gap: 3,
    justifyContent: 'center',
    paddingVertical: 10,
  },
  deleteButton: {
    backgroundColor: 'darkred',
    width: '90%',
    borderRadius: 10,
    alignItems: 'center',
    flexDirection: 'row',
    gap: 3,
    justifyContent: 'center',
    paddingVertical: 10,
  },
  likeButton: {
    backgroundColor: 'darkblue',
    width: '90%',
    borderRadius: 10,
    alignItems: 'center',
    flexDirection: 'row',
    gap: 3,
    justifyContent: 'center',
    paddingVertical: 10,
  },
  editButtonText: {
    color: 'white',
    padding: 10,
    fontSize: 15,
    fontWeight: 'bold',
  },
  deleteButtonText: {
    color: 'white',
    padding: 10,
    fontSize: 15,
    fontWeight: 'bold',
  },
  likeButtonText: {
    color: 'white',
    padding: 10,
    fontSize: 15,
    fontWeight: 'bold',
  },
  noMessagesContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    height: 600,
  },
  noMessagesText: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
    lineHeight: 30,
  },

  message: {
    marginVertical: 5,
    maxWidth: '80%',
    borderRadius: 10,
    padding: 10,
  },
  // Left-aligned for current user
  currentUserMessage: {
    backgroundColor: '#1E90FF',
    alignSelf: 'flex-start', // Aligns to the left
  },
  // Right-aligned for selected user
  selectedUserMessage: {
    backgroundColor: '#333333',
    alignSelf: 'flex-end', // Aligns to the right
  },
  currentUserRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  selectedUserRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-end', // Align content to the right
    gap: 10,
  },
  currentUserMessageText: {
    color: 'white',
    fontSize: 16,
  },
  selectedUserMessageText: {
    color: 'white',
    fontSize: 16,
  },
  currentUserImageSmall: {
    width: 30,
    height: 30,
    borderRadius: 15,
  },
  selectedUserImageSmall: {
    width: 30,
    height: 30,
    borderRadius: 15,
  },
  currentUserMedia: {
    width: 200,
    height: 150,
    borderRadius: 10,
    marginTop: 5,
  },
  selectedUserMedia: {
    width: 200,
    height: 150,
    borderRadius: 10,
    marginTop: 5,
  },
});


